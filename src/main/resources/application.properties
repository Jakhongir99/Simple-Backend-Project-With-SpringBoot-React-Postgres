# PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/crud_demo
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Liquibase Configuration
spring.liquibase.enabled=false
# spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml
# spring.liquibase.contexts=dev

# Server Configuration
server.port=8080

# JWT Configuration
jwt.secret=change-this-secret-key-to-something-very-secure-in-production
jwt.expiration-ms=3600000

# File Upload Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=50MB
spring.servlet.multipart.enabled=true
file.upload.path=./uploads/
file.upload.allowed-types=pdf,doc,docx,txt,jpg,jpeg,png,gif,xls,xlsx,zip,rar

# Logging
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG

# SpringDoc OpenAPI Configuration
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true 

# Swagger metadata (customize these)
swagger.api.title=Java Simple CRUD API
swagger.api.description=REST API for CRUD operations in the Java Simple project
swagger.api.version=1.0.0
swagger.api.terms=https://example.com/terms
swagger.contact.name="JAHONGIR"
swagger.contact.url=https://your-website.example
swagger.contact.email=your.email@example.com
# Swagger license (customize these)
swagger.license.name=Apache 2.0
swagger.license.url=https://www.apache.org/licenses/LICENSE-2.0

# OAuth2 Configuration
# Google OAuth2
spring.security.oauth2.client.registration.google.client-id=1050265828089-bke9pki1hc2mk26ob78n00com9ng3917.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/api/auth/oauth2/google/callback

# GitHub OAuth2
spring.security.oauth2.client.registration.github.client-id=Ov23liIsAgHfHju23qOV
spring.security.oauth2.client.registration.github.client-secret=4bda8384d50b26e738c32ce2415630887a8cd754
spring.security.oauth2.client.registration.github.scope=read:user,user:email
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/api/auth/oauth2/github/callback

# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=login